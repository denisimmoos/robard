using namespace std;

#include "MyWheels.h"
#define SPEED 100
MyWheels Go;

#include "MyTca9548aTsl2591.h"
MyTca9548aTsl2591 AdvSpect(0);  //<--- i2cBus
MyTca9548aTsl2591 LeftSpect(1);
MyTca9548aTsl2591 RightSpect(2);
MyTca9548aTsl2591 BackSpect(3);

#include "MyHCSR04.h"
MyHCSR04 AdvDist(30,31);
//MyHCSR04 LeftDist(32,33);
//MyHCSR04 RightDist(34,35);
//MyHCSR04 BackDist(36,37);

#define BaudRate 9600
#define KeepDist 12.0
#define StartDist 5.0

struct Sensors{
  char name[10];
  float value;
};

/* qsort struct comparision function (value float field) */
int CompareSensorsByValue(const void *a, const void *b)
{
    /*
	float comparison: returns negative if b > a
	and positive if a > b. We multiplied result by 100.0
	to preserve decimal fraction
    */

    struct Sensors *ia = (struct Sensors *)a;
    struct Sensors *ib = (struct Sensors *)b;
    return (int)(100.f*ia->value - 100.f*ib->value);
}

char *GetSensorNameByPosition(struct Sensors *array, int pos)
{
    return array[pos].name;
}

float GetSensorValueByPosition(struct Sensors *array, int pos)
{
    return array[pos].value;
}


void setup(void)
{

  Serial.begin(BaudRate);
  while(!Serial);

  // set pins for MyWheels
  Go.begin();

  AdvDist.begin();
 // LeftDist.begin();
//  RightDist.begin();
 // BackDist.begin();

  AdvSpect.begin();
  LeftSpect.begin();
  RightSpect.begin();
  BackSpect.begin();


  // almost touch the sensor to make it move
  while (AdvDist.GetDistInCm() > StartDist) {
    delay(500);
  }

  // Now we're ready to get readings ... move on to loop()!
}

void loop(void)
{

struct Sensors sensors[] = {
	{"AdvSpect", 	  AdvSpect.getFullSpectrum()},
	{"LeftSpect", 	LeftSpect.getFullSpectrum()},
	{"RightSpect",  RightSpect.getFullSpectrum()},
	{"BackSpect", 	BackSpect.getFullSpectrum()}
};

// sort the values by biggest 0
size_t sensors_len = sizeof(sensors) / sizeof(struct Sensors);
qsort(sensors, sensors_len, sizeof(struct Sensors), CompareSensorsByValue);

int check_next = 0;

while (check_next < sensors_len) {

  	Serial.println("GetSensorNameByPosition");
  	Serial.println(GetSensorNameByPosition(sensors, check_next));

if ( strcmp(GetSensorNameByPosition(sensors, check_next),"AdvSpect") == 0 ) {
  if (AdvDist.GetDistInCm() < KeepDist) {
    Go.stop();
	  check_next += 1;
  	Serial.println("STOP Adv");
  } else {
  	Serial.println("GO Adv");
     Go.advance(SPEED);
	  break;
 }

}

if ( strcmp(GetSensorNameByPosition(sensors, check_next),"LeftSpect") == 0 ) {
  if (AdvDist.GetDistInCm() < KeepDist) {
    Go.stop();
	  check_next += 1;
  	Serial.println("STOP Left");
  } else {
  	Serial.println("GO Left");
    Go.left(SPEED);
	  break;
 }
}

if ( strcmp(GetSensorNameByPosition(sensors, check_next),"RightSpect") == 0 ) {
  if (AdvDist.GetDistInCm() < KeepDist) {
    Go.stop();
	  check_next += 1;
  	Serial.println("STOP Right");
  } else {
  	Serial.println("GO Right");
    Go.left(SPEED);
	  break;
 }
}

if ( strcmp(GetSensorNameByPosition(sensors, check_next),"BackSpect") == 0 ) {
  if (AdvDist.GetDistInCm() < KeepDist) {
    Go.stop();
	  check_next += 1;
  	Serial.println("STOP Back");
  } else {
  	Serial.println("GO BACK");
    Go.back(SPEED);
	  break;
 }

}

}

}
