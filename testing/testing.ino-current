#include <stdio.h>      /* printf */
#include <stdlib.h>     /* qsort */
using namespace std;

#include "MyTca9548aTsl2591.h"
MyTca9548aTsl2591 TopSpect(0);  //# <--- i2cBus
MyTca9548aTsl2591 LeftSpect(1);
MyTca9548aTsl2591 RightSpect(2);
MyTca9548aTsl2591 BackSpect(3);

#include "MyHCSR04.h"
MyHCSR04 TopDist(30,31);
//MyHCSR04 LeftDist(32,33);
//MyHCSR04 RightDist(34,35);
//MyHCSR04 BackDist(36,37);


#define BaudRate 9600
#define KeepDist 10.0

struct Sensors{
      char name[10];
      float value;
};


class MyTools {

  private:
    struct _MyStruct;

  public:

  MyTools(struct MyStruct){
 		_MyStruct = MyStruct;
	};

  int CompareSensorsByValue(const void *a, const void *b)
  {
      struct _MyStruct *ia = (struct _MyStruct *)a;
      struct _MyStruct *ib = (struct _MyStruct *)b;
      return (int)(100.f*ia->value - 100.f*ib->value);
    /* float comparison: returns negative if b > a
    and positive if a > b. We multiplied result by 100.0
    to preserve decimal fraction */

  }


  size_t sensors_len = sizeof(_MyStruct) / sizeof(struct _MyStruct);
  qsort(_MyStruct, sensors_len, sizeof(struct _MyStruct), CompareSensorsByValue);


    //
    /* an example of struct */
    /*
    /* qsort struct comparision function (value float field) */

    char *GetSensorNameByPosition( int pos)
    {
        return _MyStruct[pos].name;
    }

    float GetSensorValueByPosition(int pos)
    {
        return _MyStruct[pos].value;
    }


}



void setup(void)
{

  Serial.begin(BaudRate);
  while(!Serial);

  TopDist.begin();
 // LeftDist.begin();
//  RightDist.begin();
 // BackDist.begin();

  TopSpect.begin();
  LeftSpect.begin();
  RightSpect.begin();
  BackSpect.begin();

  // Now we're ready to get readings ... move on to loop()!
}

void loop(void)
{

struct Sensors sensors[] = {
	{"TopSpect", 	TopSpect.getFullSpectrum()},
	{"LeftSpect", 	LeftSpect.getFullSpectrum()},
	{"RightSpect", RightSpect.getFullSpectrum()},
	{"BackSpect", 	BackSpect.getFullSpectrum()}
};

MyTools Mytool(sensors);

Serial.prinln(MyTool.GetSensorNameByPosition(0));

int check_next = 0;

}

/*
while (check_next < sensors_len) {

  	Serial.println("HUUUU Top");
  	Serial.println(GetSensorNameByPosition(sensors, check_next));


if ( strcmp(GetSensorNameByPosition(sensors, check_next),"TopSpect") == 0 ) {
  if (TopDist.GetDistInCm() < KeepDist) {
	check_next += 1;
  	Serial.println("STOOOOOOOP Top");
  	Serial.println(check_next);
  } else {
  	Serial.println("GOOOOO Top");
	break;
 }

}

if ( strcmp(GetSensorNameByPosition(sensors, check_next),"LeftSpect") == 0 ) {
  if (TopDist.GetDistInCm() < KeepDist) {
	check_next += 1;
  	Serial.println("STOOOOOOOP Leeft");
  	Serial.println(check_next);
  } else {
  	Serial.println("GOOOOO LEEEEFT");
	break;
 }
}

if ( strcmp(GetSensorNameByPosition(sensors, check_next),"RightSpect") == 0 ) {
  if (TopDist.GetDistInCm() < KeepDist) {
	check_next += 1;
  	Serial.println("STOOOOOOOP Right");
  	Serial.println(check_next);
  } else {
  	Serial.println("GOOOOO Right");
	break;
 }
}

if ( strcmp(GetSensorNameByPosition(sensors, check_next),"BackSpect") == 0 ) {
  if (TopDist.GetDistInCm() < KeepDist) {
	check_next += 1;
  	Serial.println("STOOOOOOOP Back");
  	Serial.println(check_next);
  } else {
  	Serial.println("GOOOOO BACK");
	break;
 }

}

}
*/
